TYPEMAP
IplImage*	T_CvPTROBJ
const IplImage*	T_CvPTROBJ
IplImage**	T_CvArrPtrPtr
const IplImage**	T_CvArrPtrPtr
goat_extractor_params* T_GOAT_PARAMS

INPUT
T_CvPTROBJ
	if (sv_isobject($arg) && sv_derived_from($arg, \"@{
			$type =~ /\b(Cv|Ipl)(\w+)/; ['Cv::'.$2] }\")) {
		$var = INT2PTR(${type}, SvIV((SV*)SvRV($arg)));
	} else if (SvROK($arg) && SvIOK(SvRV($arg)) && SvIV(SvRV($arg)) == 0) {
		$var = (${type})0;
	} else
		Perl_croak(aTHX_ \"%s is not of type %s in %s\",
			\"$var\", \"@{(my $t = $type) =~ s/\bconst\s+//g; [$t]}\", \"$pname\")
T_CvArrPtrPtr
	int length_$var = 0;
	if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVAV) {
		AV* av = (AV*)SvRV($arg); length_$var = av_len(av) + 1;
		if (length_$var > 0) { int i;
			$var = ($type)alloca(sizeof(${var}[0]) * length_$var);
			for (i = 0; i < length_$var; i++) {
				SV* p = (SV*)*av_fetch(av, i, 0);
				if (SvROK(p) && sv_derived_from(p, \"@{
						$type =~ /\b(Cv|Ipl)(\w+)/; ['Cv::'.$2] }\"))
					${var}[i] = INT2PTR(@{
						$type =~ /(const\s)?(\w+)[\s\*]+$/; [$2.'*']
					}, SvIV((SV*)SvRV(p)));
				else if (SvROK(p) && SvIOK(SvRV(p)) && SvIV(SvRV(p)) == 0)
					${var}[i] = (@{$type =~ /(const\s)?(\w+)[\s\*]+$/; [$2.'*']
					})0;
				else
					Perl_croak(aTHX_ \"%s is not of type %s in %s\",
						\"$var\", \"@{(my $t = $type) =~ s/\bconst\s+//g; [$t]}\", \"$pname\");
			}
		} else
			$var = ($type)0;
	} else if (SvROK($arg) && SvIOK(SvRV($arg)) && SvIV(SvRV($arg)) == 0) {
		$var = ($type)0;
	} else
		Perl_croak(aTHX_ \"%s is not of type %s in %s\",
			\"$var\", \"@{(my $t = $type) =~ s/\bconst\s+//g; [$t]}\", \"$pname\")
T_GOAT_PARAMS
		if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVHV) {
	    	$var = (goat_extractor_params*)malloc(sizeof(goat_extractor_params));

			HV* hash = (HV*)SvRV($arg);
			$var->x =SvIV(SvRV(*(hv_fetch(hash,\"x\",1,0))));
			$var->y =SvIV(SvRV(*(hv_fetch(hash,\"y\",1,0))));
			$var->width =SvIV(SvRV(*(hv_fetch(hash,\"width\",5,0))));
			$var->height =SvIV(SvRV(*(hv_fetch(hash,\"height\",6,0))));
			$var->mode =SvIV(SvRV(*(hv_fetch(hash,\"mode\",4,0))));
		} else {
			Perl_croak(aTHX,\"Hashref expected for T_GOAT_PARAMS\");
		}
